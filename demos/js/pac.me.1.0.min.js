/*
 * pac.me JavaScript Library v1.0
 * Copyright (c) 2015 ymz
 * Released under the MIT license
 * https://raw.githubusercontent.com/ymz-rocks/pac.me/master/LICENSE
 */

function Pac(n, t, e) { function a(n, e) { function a(n, t, e) { n.addEventListener ? n.addEventListener(t, e, !1) : n.attachEvent ? n.attachEvent("on" + t, e) : n[t] = e } a(window, "load", function () { o = document.getElementById(e), o.getContext && (s = o.getContext("2d"), n.canvas = { x: o.width, y: o.height, scale: 1 }, t(n)) }) } var i = "iACOZyXXZZWeWmehsRDfkvuJhfvDkZDqcwEdYlRJ"; if (this.center = function (n, t) { s.translate(n.x, n.y), t(), s.translate(-n.x, -n.y) }, this.copy = function (n, t) { if (null == n || "object" != typeof n) return n; if (t || (t = {}), n instanceof Date) return a = new Date, a.setTime(n.getTime()), a; if (n instanceof Array) { a = []; for (var e = 0, i = n.length; i > e; e++) a[e] = r.copy(n[e]); return a } if (n instanceof Object) { for (var o in n) n.hasOwnProperty(o) && (t[o] = r.copy(n[o], t[o])); return t } return void 0 }, this.data = function () { var n = "pac_" + i; return window[n] = r.fix(window[n], {}), n }, this.fix = function (n, t, e) { return 3 == arguments.length ? n == t ? e : n : n ? n : t }, n && t) { var r = this; if (t.length > 1 && (window[r.data()][n] = { invoke: t, set: e }), Pac.prototype.isPrototypeOf(this)) { var o, s, f = []; a(this, n), r.anim = { fps: 30, speed: 1, stop: !1, pause: !1 }, this.interval = function (n) { return 0 == arguments.length ? r.anim.interval : (r.anim.interval = r.fix(n, r.anim.interval), r) }, this.fps = function (n) { return 0 == arguments.length ? r.anim.fps : (r.anim.fps = r.fix(n, r.anim.fps), r) }, this.speed = function (n) { return 0 == arguments.length ? r.anim.speed : (r.anim.speed = r.fix(n, r.anim.speed), r) }, this.scale = function (n, t) { return 0 == arguments.length ? r.canvas.scale : (t || (t = function () { o.width = r.canvas.x * n, o.height = r.canvas.y * n }), n && n > 0 && (t(), r.canvas.scale = n), r) }, this.zoom = function (n) { return 0 == arguments.length ? r.canvas.scale : r.scale(n, function () { r.center({ x: .5 * o.width, y: .5 * o.height }, function () { s.scale(n, n), r.canvas.zoomed = !0 }) }) }, this.load = function (n, t, e) { var a = window[r.data()][n]; if (a && a.invoke) { var i = "object" == typeof t, o = r.copy(a.set, {}); return i && (o = r.copy(t, o)), o ? f.push({ invoke: a.invoke, set: o, delegate: e ? e : i ? function () { } : t }) : a.invoke(r, t), r } }, this.draw = { pie: function (n) { function t(n, t) { return n > 1 && (n = 1), (0 == n ? 0 : 360 * n * (Math.PI / 180)) + r.fix(t, 0) } var e = r.fix(n.r, 10), a = r.fix(n.x, 0), i = r.fix(n.y, 0), o = r.scale(); return o && !r.canvas.zoomed && (e *= o, a *= o, i *= o), this.paint(n, function () { var o = { x: a + e, y: i + e }, f = r.fix(n.start, 0), c = r.fix(n.end, 1), u = c - f, l = 1.5 * Math.PI; 0 == u && (u = 1), 0 != f && r.center(o, function () { s.rotate(t(f)) }); var d = n.hasOwnProperty("anti") ? n.anti : "undefined" != typeof G_vmlCanvasManager && c > f; return s.arc(o.x, o.y, e, l, t(u, l), d), n.back && n.back.color && "transparent" != n.back.color && 1 > u ? (s.lineTo(o.x, o.y), !0) : !1 }), r.draw }, text: function (n) { this.paint(n, function () { if (!n.value) return !0; n.font || (n.font = {}), n.font.size = r.fix(n.font.size, 28), n.font.name = r.fix(n.font.name, "Verdana"); var t = r.fix(n.x, 0), e = r.fix(n.y, 0), a = r.scale(); return r.scale() && !r.canvas.zoomed && (t *= a, e *= a, n.font.size *= a), s.font && (s.font = n.font.size + "pt " + n.font.name), s.fillText && s.fillText(n.value, t, e + n.font.size), !0 }) }, paint: function (n, t) { function e(n) { n = n.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, function (n, t, e, a) { return t + t + e + e + a + a }); var t = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(n); return t ? { r: parseInt(t[1], 16), g: parseInt(t[2], 16), b: parseInt(t[3], 16) } : { r: 0, g: 0, b: 0 } } function a(n, t) { 0 > t ? t = 0 : t > 1 && (t = 1); var a = e(n); return "rgba(" + a.r + "," + a.g + "," + a.b + "," + t + ")" } if (t) { s.save(); var i = n.border && n.border.size > 0, o = n.back && n.back.color, f = 0; if (i) { var c = r.fix(n.border.size, 1), u = r.scale(); u && (c *= u), r.canvas.zoomed || (f = .5 * c), s.lineWidth = c, s.lineJoin = "round", s.strokeStyle = r.fix(r.fix(n.border.color, "#929292"), "transparent", void 0) } return o && (n.back.color = r.fix(n.back.color, "#181818"), "transparent" == n.back.color && "undefined" != typeof G_vmlCanvasManager && (n.back.alpha = .001), s.fillStyle && (s.fillStyle = n.back.alpha ? a(n.back.color, n.back.alpha) : n.back.color)), s.translate(f, f), s.beginPath(), t() && s.closePath(), s.fill(), i && s.stroke(), s.restore(), r.canvas.zoomed && (s.setTransform(1, 0, 0, 1, 0, 0), r.canvas.zoomed = !1), r.draw } } }, this.play = function (n, t, e) { r.anim.pause = r.anim.stop = !1; var a = "object" == typeof n; (0 == arguments.length || a) && (a && (t = r.copy(n)), n = f); var i = "function" != typeof n, o = i ? n : [n ? { invoke: n } : f[0]]; if (o) { if (r.anim.handlers = o, !i) { var s = r.anim.handlers[0]; s.set = r.fix(t, r.fix(s.set, {})), s.delegate = r.fix(e, s.delegate) } var c = function () { if (r.anim.stop) return void (r.anim.handlers = void 0); if (r.anim.stop || r.anim.pause) clearTimeout(r.anim.key); else { r.clear(); for (var n in r.anim.handlers) { var t = r.anim.handlers[n]; t.invoke(t.set, r, t.delegate) } var e = r.interval() ? r.interval() : 1 / (.001 * r.fps()) * (1 / r.speed()); r.anim.key = setTimeout(c, e) } }; return c(), r } }, this.clear = function () { return s.clearRect ? s.clearRect(0, 0, o.width, o.height) : o.width = o.width, r }, this.toggle = function () { return r.anim.pause ? r.play() : r.pause() }, this.pause = function () { return r.anim.pause = !0, r }, this.stop = function () { return r.anim.stop = !0, r }, this.random = function (n, t) { return Math.floor(Math.random() * (t - n + 1) + n) }, this.shuffle = function (n) { for (var t, e, a = n.length; a; t = Math.floor(Math.random() * a), e = n[--a], n[a] = n[t], n[t] = e); return n } } } }